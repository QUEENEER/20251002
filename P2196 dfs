#include <bits/stdc++.h>
using namespace std;
#define int long long
#define piii pair<int,int>
//sort(puch,puch+n,greater<int>());
struct place{
	int u,v;
};
vector<place>s;
bool cmp(place x,place y){
	if(x.v==y.v){
		return x.u<y.u;
	}
	else return x.v<y.v;
}
int cnt;
int maxx=0;
char arr[1001][1001];
int d[1001][1001];
int ans[1001];
int dx[12]={-1,-2,-2,-1,1,2,2,1,-2,-2,2,2}, dy[12]={-2,-1,1,2,2,1,-1,-2,-2,2,2,-2};
int a[21],b[21],path[1001];
int n;
bool check(int x){
	for(int i=1;i<=n;i++){
		if(d[x][i]&&!b[i]){
			return false;
		}
	}
	return true;
}

void dfs(int x,int step,int sum){
	if(check(x)){
		if(maxx<sum){
			maxx=sum;
			cnt=step;
			for(int i=1;i<=step;i++){
				ans[i]=path[i];
			}
		}
		return;
	}
	for(int i=1;i<=n;i++){
		if(d[x][i]&&!b[i]){
			b[i]=1;
			path[step+1]=i;
			dfs(i,step+1,sum+a[i]);
			b[i]=0;
		}
	}
}
	
signed main(){
	cin>>n;
	for(int i=1;i<=n;i++){
		cin>>a[i];
	}
	for(int i=1;i<n;i++){
		for(int j=i+1;j<=n;j++){
			cin>>d[i][j];
		}
	}
	for(int i=1;i<=n;i++){
		b[i]=1;
		path[1]=i;
		dfs(i,1,a[i]);
		b[i]=0;
	}
	for(int i=1;i<=cnt;i++){
		cout<<ans[i]<<' ';
	}
	cout<<'\n'<<maxx<<endl;
}        
